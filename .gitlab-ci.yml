# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
image: python:3.7
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
cache:
  paths:
  - ".cache/pip"
  - venv/
stages:
- prep
- lint
- test
- pages
- deploy
prep:
  stage: prep
  script:
    - python -V  # Print out python version for debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
linting:
  stage: lint
  script:
    - pip install flake8
    - flake8 --max-line-length=80 --per-file-ignores="__init__.py:F401" ./*.py
    - flake8 --max-line-length=80 --per-file-ignores="__init__.py:F401" ./uuid_module/*.py
coverage:
  stage: test
  needs: []
  script:
    - pip install -r requirements.txt
    - pytest --cov=./ --junitxml=report.xml tests/
  artifacts:
    when: always
    reports:
      junit: report.xml
pages:
  stage: pages
  needs: ["coverage"]
  script:
  - pip install pdoc
  - pdoc -o docs/ -d google uuid_module
  - mkdir ./public
  - mv ./docs/* ./public/
  artifacts:
    paths:
    - public
  rules:
  - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
deploy_staging:
  stage: deploy
  image: $CI_REGISTRY/cmpbad/smartsheet-data-sync-gitlab
  script:
    # - /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    # - echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> /root/.profile
    # - eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    # - brew install gcc
    # - brew install aws/tap/copilot-cli
    - export AWS_REGION=us-east-2
    - export AWS_ACCESS_KEY_ID=$ACCESS_KEY
    - export AWS_SECRET_ACCESS_KEY=$SECRET_KEY
    # - groupadd docker
    # - usermod -aG docker root
    # - newgrp docker
    # - apt update
    # - apt install clang -y
    # - brew install --build-from-source docker
    # - dockerd
    - copilot svc deploy --name svc-smartsheet-data-sync --env staging
  environment:
    name: Staging
deploy_prod:
  stage: deploy
  needs: ["deploy_staging"]
  script:
    # - /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    # - echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> /root/.profile
    # - eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    # - brew install gcc
    # - brew install aws/tap/copilot-cli
    - export AWS_REGION=us-east-2
    - export AWS_ACCESS_KEY_ID=$ACCESS_KEY
    - export AWS_SECRET_ACCESS_KEY=$SECRET_KEY
    # - groupadd docker
    # - usermod -aG docker root
    # - newgrp docker
    # - apt update
    # - apt install clang -y
    # - brew install --build-from-source docker
    # - dockerd
    - copilot svc deploy --name svc-smartsheet-data-sync --env prod
  environment:
    name: Production
  when: manual
  only:
    - main

# # after_script:
# #   - docker build -t registry.gitlab-dev.video.xarth.tv/cmpbad/smartsheet-data-sync-gitlab .
# #   - docker push registry.gitlab-dev.video.xarth.tv/cmpbad/smartsheet-data-sync-gitlab
# #   - main
# # sast:
# #   stage: test
# # include:
# # - template: Security/SAST.gitlab-ci.yml
