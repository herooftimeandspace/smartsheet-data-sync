[{"fullname": "uuid_module", "modulename": "uuid_module", "qualname": "", "type": "module", "doc": "<p>The UUID module interacts with the Smartsheet API and the Jira Index\nSheet. It is broken down into submodules for getting data from the\nSmartsheet API, building new data structures such as cells and rows,\nand writing data back to Smartsheets.</p>\n\n<p>The Helper and Variables submodules contain smaller functions to\nsmooth the data transfermation process between functions, and load\nconstant variables to ensure consistency across the application.</p>\n"}, {"fullname": "uuid_module.build_data", "modulename": "uuid_module.build_data", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "uuid_module.build_data.build_linked_cell", "modulename": "uuid_module.build_data", "qualname": "build_linked_cell", "type": "function", "doc": "<p>Helper function to build the Cell object and cell link properties</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>jira_index_sheet (Sheet object):</strong>  The Sheet object where the Jira\ndata is stored</li>\n<li><strong>jira_index_col_map (dict): The column name:</strong> id map for the\nJira Index sheet</li>\n<li><strong>dest_col_map (dict): The column name:</strong> id map for the destination sheet</li>\n<li><strong>idx_row_id (str):</strong>  The row ID in the Jira Index sheet where the cell\nlink will pull data</li>\n<li><strong>colunn (str):</strong>  The name of the column to write to in both sheets</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Cell: The cell object to be written back to the destination, with\n        link to the Jira Index Sheet.</p>\n</blockquote>\n", "parameters": ["jira_index_sheet", "jira_index_col_map", "dest_col_map", "idx_row_id", "colunn", "smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.build_data.dest_indexes", "modulename": "uuid_module.build_data", "qualname": "dest_indexes", "type": "function", "doc": "<p>Helper function to create indexes on the destination sheet\n   and rows.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>project_data (dict):</strong>  The dictionary with all project rows\nand relevant data from the\nget_all_row_data function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict: a list of destination sheet IDs and a list of\n        destination row IDs.</p>\n</blockquote>\n", "parameters": ["project_data"], "funcdef": "def"}, {"fullname": "uuid_module.build_data.build_row", "modulename": "uuid_module.build_data", "qualname": "build_row", "type": "function", "doc": "<p>Function to build new cell links, unlink broken links, or\n   do nothing if the cell link status is OK. Used to remove\n   unchanged rows from the update list.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>row (Row):</strong>  The row to reference when looking up link\nstatuses.</li>\n<li><strong>columns_to_link (list):</strong>  List of columns that we want to\nlink together</li>\n<li><strong>jira_index_sheet (Sheet object):</strong>  The Sheet object where the Jira\ndata is stored</li>\n<li><strong>jira_index_col_map (dict): The column name:</strong> id map for the\nJira Index sheet</li>\n<li><strong>dest_col_map (dict): The column name:</strong> id map for the destination sheet</li>\n<li><strong>idx_row_id (str):</strong>  The row ID in the Jira Index sheet where the cell\nlink will pull data</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>[type]: [description]</p>\n</blockquote>\n", "parameters": ["row", "columns_to_link", "dest_col_map", "jira_index_sheet", "jira_index_col_map", "idx_row_id", "smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.cell_link_sheet_data", "modulename": "uuid_module.cell_link_sheet_data", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "uuid_module.cell_link_sheet_data.write_uuid_cell_links", "modulename": "uuid_module.cell_link_sheet_data", "qualname": "write_uuid_cell_links", "type": "function", "doc": "<p>If the description column has a value, look it up against\n   the UUIDs in the project dictionary. If a UUID matches, sync\n   details.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>project_data_index (dict):</strong>  All UUIDs and the row values</li>\n<li><strong>source_sheets (list):</strong>  All sheet objects in all workspaces</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the project index data passed in is None,\nraises and logs an error.</li>\n</ul>\n", "parameters": ["project_data_index", "source_sheets", "smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.get_data", "modulename": "uuid_module.get_data", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "uuid_module.get_data.get_all_row_data", "modulename": "uuid_module.get_data", "qualname": "get_all_row_data", "type": "function", "doc": "<p>Parses through all source sheets and gets specific data from the\n   columns provided.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>source_sheets (list):</strong>  A list of Sheet objects to parse</li>\n<li><strong>columns (list):</strong>  A list of column names to extract data from.</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheeet client, required for\nreading and writing to the Smartsheet API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict: Returns a dict in the format of\n        7208979009955716-3683235938232196-7010994181433220-202105112138550000,\n        {\n            \"UUID\": \"7208979009955716-3683235938232196-7010994181433220-\n                     202105112138550000\",  # type: str\n            \"Tasks\": \"Retrospective\", # type: str\n            \"Description\": None, # type: str\n            \"Status\": None, # type: str\n            \"Assigned To\": None, # type: str\n            \"Jira Ticket\": None, # type: str\n            \"Duration\": None, # type: str\n            \"Start\": None, # type: str\n            \"Finish\": None, # type: str\n            \"Predecessors\": \"38FS +1w\", # type: str\n            \"Summary\": \"False\" # type: str\n        }</p>\n</blockquote>\n", "parameters": ["source_sheets", "columns", "smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.get_data.get_blank_uuids", "modulename": "uuid_module.get_data", "qualname": "get_blank_uuids", "type": "function", "doc": "<p>Creates nested dicts with all rows that require a new UUID to\n   be generated.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>source_sheets (list):</strong>  A list of Sheet objects</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to call the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict: A nested set of dictionaries in the form of:\n  7637702645442436,  (Sheet ID, int)\n  {\n      \"sheet_name\": \"Cloudwatch: Distribution Project Plan\", # type: str\n      \"row_data\": {  # type: dict\n          4733217466279812: { (Row ID, int)\n              \"column_id\": 2745267022784388, (int)\n              \"uuid\": \"7637702645442436-4733217466279812-\n                       2745267022784388-202105112340380000\" (str)\n          }\n      }\n  }</p>\n</blockquote>\n", "parameters": ["source_sheets", "smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.get_data.load_jira_index", "modulename": "uuid_module.get_data", "qualname": "load_jira_index", "type": "function", "doc": "<p>Helper function to create indexes on the Jira index rows. Pulls from\n   the API every time to get the most up-to-date version of the sheet\n   data.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to query the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict: A dictionary containing the Jira ticket as the key and the\n        row ID as the value.</p>\n</blockquote>\n", "parameters": ["smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.get_data.get_sub_indexs", "modulename": "uuid_module.get_data", "qualname": "get_sub_indexs", "type": "function", "doc": "<p>Read all rows from the full project data index. If the Jira\n   column exists in the dict values, create two sub-indexes.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>project_data (dict): The full set of UUIDs:</strong> Column data\npulled from the API.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict: jira_sub_index in the form of Jira Ticket: [UUID(s)] (list)\n        project_sub_index in the form of UUID: Jira Ticket (str)</p>\n</blockquote>\n", "parameters": ["project_data"], "funcdef": "def"}, {"fullname": "uuid_module.get_data.get_all_sheet_ids", "modulename": "uuid_module.get_data", "qualname": "get_all_sheet_ids", "type": "function", "doc": "<p>Gets all the sheet IDs from every sheet in every folder,\n   subfolder and workspace as defined in the workspace_id.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list: A list of all sheet IDs across every workspace</p>\n</blockquote>\n", "parameters": ["smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.get_data.get_ws_folder_map", "modulename": "uuid_module.get_data", "qualname": "get_ws_folder_map", "type": "function", "doc": "<p>Get al of the folder IDs within the root Workspace, for each\n   workspace provided.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>workspace (Workspace object):</strong>  The workspace to parse for folder\nIDs.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list: A list of folder IDs found in the workspace.</p>\n</blockquote>\n", "parameters": ["workspace"], "funcdef": "def"}, {"fullname": "uuid_module.get_data.get_folder_sheet_map", "modulename": "uuid_module.get_data", "qualname": "get_folder_sheet_map", "type": "function", "doc": "<p>Get all sheets from each folder in the folder map.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>folder_map (list):</strong>  A list of folder IDs found in the workspace</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list: A list of sheet IDs from every folder in the workspace.</p>\n</blockquote>\n", "parameters": ["folder_map", "smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.get_data.get_ws_sheet_map", "modulename": "uuid_module.get_data", "qualname": "get_ws_sheet_map", "type": "function", "doc": "<p>Gets all Sheet IDs from the root workspace, not located in a folder.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>workspace_id (str):</strong>  The ID or the workspace</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list: A list of all sheet IDs in the root workspace</p>\n</blockquote>\n", "parameters": ["workspace_id", "smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.get_data.get_subfolder_map", "modulename": "uuid_module.get_data", "qualname": "get_subfolder_map", "type": "function", "doc": "<p>Loops through folder IDs and finds any subfolders, and\n   appends the new folder ID to the list, if found</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>folder_ids (list):</strong>  The List of folder IDs to parse through</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list: A flat list of all folder IDs located within other\n        folders.</p>\n</blockquote>\n", "parameters": ["folder_ids", "smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.helper", "modulename": "uuid_module.helper", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "uuid_module.helper.get_column_id", "modulename": "uuid_module.helper", "qualname": "get_column_id", "type": "function", "doc": "<p>Gets the ID from a column name</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>row (Row):</strong>  The row of data that contains the IDs</li>\n<li><strong>column_name (str):</strong>  The name of the referenced column</li>\n<li><strong>column_map (dict): The map of Column Name:</strong>  Column ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int: The column ID</p>\n</blockquote>\n", "parameters": ["row", "column_name", "column_map"], "funcdef": "def"}, {"fullname": "uuid_module.helper.get_column_map", "modulename": "uuid_module.helper", "qualname": "get_column_map", "type": "function", "doc": "<p>Creates a map of column names to column IDs</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>sheet (sheet):</strong>  The sheet containing column names and IDs</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict: A map of Column Name: Column ID</p>\n</blockquote>\n", "parameters": ["sheet"], "funcdef": "def"}, {"fullname": "uuid_module.helper.has_cell_link", "modulename": "uuid_module.helper", "qualname": "has_cell_link", "type": "function", "doc": "<p>Helper function to determine if an existing cell already has a cell\n   link.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>old_cell (Cell):</strong>  The Cell object to check.</li>\n<li><strong>direction (str):</strong>  Whether to check incoming or outgoing cell links.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str: \"Linked\" if status is \"OK\", \"Broken\" if staus is \"BROKEN\",\n       None if the cell doesn't have a value and \"Unlinked\" if the\n       cell doesn't have a cell link property. If the cell link\n       type is 'linksOutToCells' always return \"Linked\".</p>\n</blockquote>\n", "parameters": ["old_cell", "direction"], "funcdef": "def"}, {"fullname": "uuid_module.helper.get_cell_value", "modulename": "uuid_module.helper", "qualname": "get_cell_value", "type": "function", "doc": "<p>Get the value of the cell or return None</p>\n", "parameters": ["row", "col_name", "col_map"], "funcdef": "def"}, {"fullname": "uuid_module.helper.json_extract", "modulename": "uuid_module.helper", "qualname": "json_extract", "type": "function", "doc": "<p>Recursively fetch values from nested JSON.</p>\n", "parameters": ["obj", "key"], "funcdef": "def"}, {"fullname": "uuid_module.helper.truncate", "modulename": "uuid_module.helper", "qualname": "truncate", "type": "function", "doc": "<p>Returns a value truncated to a specific number of decimal places.</p>\n", "parameters": ["number", "decimals"], "funcdef": "def"}, {"fullname": "uuid_module.variables", "modulename": "uuid_module.variables", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "uuid_module.variables.log_location", "modulename": "uuid_module.variables", "qualname": "log_location", "type": "variable", "doc": "<p>Location to save logs</p>\n"}, {"fullname": "uuid_module.variables.module_log_name", "modulename": "uuid_module.variables", "qualname": "module_log_name", "type": "variable", "doc": "<p>The main log written to disk</p>\n"}, {"fullname": "uuid_module.variables.workspace_id", "modulename": "uuid_module.variables", "qualname": "workspace_id", "type": "variable", "doc": "<p>List of workspace IDs</p>\n"}, {"fullname": "uuid_module.variables.uuid_col", "modulename": "uuid_module.variables", "qualname": "uuid_col", "type": "variable", "doc": "<p>UUID column name</p>\n"}, {"fullname": "uuid_module.variables.task_col", "modulename": "uuid_module.variables", "qualname": "task_col", "type": "variable", "doc": "<p>Tasks column name</p>\n"}, {"fullname": "uuid_module.variables.description_col", "modulename": "uuid_module.variables", "qualname": "description_col", "type": "variable", "doc": "<p>Description column name</p>\n"}, {"fullname": "uuid_module.variables.status_col", "modulename": "uuid_module.variables", "qualname": "status_col", "type": "variable", "doc": "<p>Status column name</p>\n"}, {"fullname": "uuid_module.variables.assignee_col", "modulename": "uuid_module.variables", "qualname": "assignee_col", "type": "variable", "doc": "<p>Assignee column name</p>\n"}, {"fullname": "uuid_module.variables.jira_col", "modulename": "uuid_module.variables", "qualname": "jira_col", "type": "variable", "doc": "<p>Jira ticket column name</p>\n"}, {"fullname": "uuid_module.variables.summary_col", "modulename": "uuid_module.variables", "qualname": "summary_col", "type": "variable", "doc": "<p>Summary column name</p>\n"}, {"fullname": "uuid_module.variables.start_col", "modulename": "uuid_module.variables", "qualname": "start_col", "type": "variable", "doc": "<p>Start column name</p>\n"}, {"fullname": "uuid_module.variables.finish_col", "modulename": "uuid_module.variables", "qualname": "finish_col", "type": "variable", "doc": "<p>Finish column name</p>\n"}, {"fullname": "uuid_module.variables.duration_col", "modulename": "uuid_module.variables", "qualname": "duration_col", "type": "variable", "doc": "<p>Duration column name</p>\n"}, {"fullname": "uuid_module.variables.predecessor_col", "modulename": "uuid_module.variables", "qualname": "predecessor_col", "type": "variable", "doc": "<p>Predecessors column name</p>\n"}, {"fullname": "uuid_module.variables.jira_idx_sheet", "modulename": "uuid_module.variables", "qualname": "jira_idx_sheet", "type": "variable", "doc": "<p>Jira Index Sheet ID</p>\n"}, {"fullname": "uuid_module.variables.index_columns", "modulename": "uuid_module.variables", "qualname": "index_columns", "type": "variable", "doc": "<p>List of all columns in the UUID Index Sheet</p>\n"}, {"fullname": "uuid_module.variables.jira_index_columns", "modulename": "uuid_module.variables", "qualname": "jira_index_columns", "type": "variable", "doc": "<p>List of all columns in the Jira Index Sheet</p>\n"}, {"fullname": "uuid_module.variables.sheet_columns", "modulename": "uuid_module.variables", "qualname": "sheet_columns", "type": "variable", "doc": "<p>List of columns found in Project or Program sheets</p>\n"}, {"fullname": "uuid_module.variables.sync_columns", "modulename": "uuid_module.variables", "qualname": "sync_columns", "type": "variable", "doc": "<p>List of columns to use during Cell link syncs</p>\n"}, {"fullname": "uuid_module.write_data", "modulename": "uuid_module.write_data", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "uuid_module.write_data.write_uuids", "modulename": "uuid_module.write_data", "qualname": "write_uuids", "type": "function", "doc": "<p>Writes UUIDs back to a collection of Smartsheets</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>sheets_to_update (dict):</strong>  The sheets that need a UUID written</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int: The number of sheets that were updated.</p>\n</blockquote>\n", "parameters": ["sheets_to_update", "smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.write_data.link_from_index", "modulename": "uuid_module.write_data", "qualname": "link_from_index", "type": "function", "doc": "<p>Main functionality. For each sheet in the destination sheet\n   index, parse through the rows, determine if cells need to be\n   linked, create cell links and then write the rows back to\n   the sheet.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>project_sub_index (dict):</strong>  The list of projects that have a\nUUID:Jira Ticket map.</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: True if any links were written, False if no data was\n        written back to any sheet.</p>\n</blockquote>\n", "parameters": ["project_sub_index", "smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.write_data.check_uuid", "modulename": "uuid_module.write_data", "qualname": "check_uuid", "type": "function", "doc": "<p>Function to check the UUIDs in the Jira Index.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>uuid_value (list):</strong>  The list of UUIDs to look for</li>\n<li><strong>jira_value (str):</strong>  Used in logging to associate UUID(s) with a Jira\nticket</li>\n<li><strong>uuid_list (list):</strong>  UIDs to check in to see if there's a match</li>\n<li><strong>jira_data_values (list):</strong>  UUIDs associated with a Jira ticket\nfrom the Jira Index</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: False if there is no UUID list or if the UUID is found\n        in the UUID list.\n  list: uuid_list if the UUID is not found in the uuid_list after\n        appending the new UUID, or jira_data_values if the UUID\n        value is None</p>\n</blockquote>\n", "parameters": ["uuid_value", "jira_value", "uuid_list", "jira_data_values"], "funcdef": "def"}, {"fullname": "uuid_module.write_data.write_jira_uuids", "modulename": "uuid_module.write_data", "qualname": "write_jira_uuids", "type": "function", "doc": "<p>Checks each row of the index sheet for the Jira ticket\n   and UUID cells. Compares that against the UUIDs and Jira tickets of each\n   destination sheet. If there is a match, do nothing. If there isn't a\n   match, append or create the UUID value and write the UUID cell back to\n   the Index Sheet.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>jira_sub_index (dict):</strong>  [description]</li>\n<li><strong>project_sub_index (dict):</strong>  [description]</li>\n<li><strong>smartsheet_client (Object):</strong>  [description]</li>\n</ul>\n", "parameters": ["jira_sub_index", "project_sub_index", "smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.write_data.write_predecessor_dates", "modulename": "uuid_module.write_data", "qualname": "write_predecessor_dates", "type": "function", "doc": "<p>Ensure predecessor start dates are updated across all linked sheets,\n   but only if the new start date is != the existing start date.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>src_data (dict):</strong>  Row data from the write_uuid_cell_links.\nSee below for expected format.</li>\n<li><strong>project_data_index (dict):</strong>  The dict of UUIDs and row data pulled\nfrom every project sheet.</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: True if the Start Date in the earliest predecessor was\n        written back via API. False if the Start Date was not\n        written due to failure.</p>\n</blockquote>\n\n<p>Format of the src_data should be:\n{\n    \"UUID\": \"7208979009955716-3683235938232196-\n            7010994181433220-202105112138550000\",  # Type: str\n    \"Tasks\": \"Retrospective\", # Type: str\n    \"Description\": \"Thoughts on how the project went.\",  # Type: str\n    \"Status\": \"In Progress\",  # Type: str\n    \"Assigned To\": \"link@twitch.tv\",  # Type: str\n    \"Jira Ticket\": \"ING-12342\",  # Type: str\n    \"Duration\": None,  # Type: str\n    \"Start\": \"2021-03-31T08:00:00\",  # Type: str\n    \"Finish\": \"2021-03-31T08:00:00\",  # Type: str\n    \"Predecessors\": \"38FS +1w\",  # Type: str\n    \"Summary\": \"False\"  # Type: str\n}</p>\n", "parameters": ["src_data", "project_data_index", "smartsheet_client"], "funcdef": "def"}]