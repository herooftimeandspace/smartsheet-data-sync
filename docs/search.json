[{"fullname": "uuid_module", "modulename": "uuid_module", "qualname": "", "type": "module", "doc": "<p>The UUID module interacts with the Smartsheet API and the Jira Index\nSheet. It is broken down into submodules for getting data from the\nSmartsheet API, building new data structures such as cells and rows,\nand writing data back to Smartsheets.</p>\n\n<p>The Helper and Variables submodules contain smaller functions to\nsmooth the data transformation process between functions, and load\nconstant variables to ensure consistency across the application.</p>\n"}, {"fullname": "uuid_module.build_data", "modulename": "uuid_module.build_data", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "uuid_module.build_data.build_linked_cell", "modulename": "uuid_module.build_data", "qualname": "build_linked_cell", "type": "function", "doc": "<p>Helper function to build the Cell object and cell link properties</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>jira_index_sheet (Sheet object):</strong>  The Sheet object where the Jira\ndata is stored</li>\n<li><strong>jira_index_col_map (dict): The column name:</strong> id map for the\nJira Index sheet</li>\n<li><strong>dest_col_map (dict): The column name:</strong> id map for the destination sheet</li>\n<li><strong>idx_row_id (str):</strong>  The row ID in the Jira Index sheet where the cell\nlink will pull data</li>\n<li><strong>colunn (str):</strong>  The name of the column to write to in both sheets</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Cell: The cell object to be written back to the destination, with\n        link to the Jira Index Sheet.</p>\n</blockquote>\n", "parameters": ["jira_index_sheet", "jira_index_col_map", "dest_col_map", "idx_row_id", "colunn", "smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.build_data.dest_indexes", "modulename": "uuid_module.build_data", "qualname": "dest_indexes", "type": "function", "doc": "<p>Helper function to create indexes on the destination sheet\n   and rows. Faster than pulling data from the API because the app\n   already has the data from the project_data dictionary</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>project_data (dict):</strong>  The dictionary with all project rows\nand relevant data from the\nget_all_row_data function.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict: a list of destination sheet IDs and a list of\n        destination row IDs.</p>\n</blockquote>\n", "parameters": ["project_data"], "funcdef": "def"}, {"fullname": "uuid_module.build_data.build_row", "modulename": "uuid_module.build_data", "qualname": "build_row", "type": "function", "doc": "<p>Function to build new cell links, unlink broken links, or\n   do nothing if the cell link status is OK. Used to remove\n   unchanged rows from the update list.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>row (Row):</strong>  The row to reference when looking up link\nstatuses.</li>\n<li><strong>columns_to_link (list):</strong>  List of columns that we want to\nlink together</li>\n<li><strong>jira_index_sheet (Sheet object):</strong>  The Sheet object where the Jira\ndata is stored</li>\n<li><strong>jira_index_col_map (dict): The column name:</strong> id map for the\nJira Index sheet</li>\n<li><strong>dest_col_map (dict): The column name:</strong> id map for the destination sheet</li>\n<li><strong>idx_row_id (str):</strong>  The row ID in the Jira Index sheet where the cell\nlink will pull data</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Row: If cells were appended to the row, returns the new row, otherwise\n       returns None.</p>\n</blockquote>\n", "parameters": ["row", "columns_to_link", "dest_col_map", "jira_index_sheet", "jira_index_col_map", "idx_row_id", "smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.cell_link_sheet_data", "modulename": "uuid_module.cell_link_sheet_data", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "uuid_module.cell_link_sheet_data.write_uuid_cell_links", "modulename": "uuid_module.cell_link_sheet_data", "qualname": "write_uuid_cell_links", "type": "function", "doc": "<p>If the description column has a value, look it up against\n   the UUIDs in the project dictionary. If a UUID matches, sync\n   details.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>project_data_index (dict):</strong>  All UUIDs and the row values</li>\n<li><strong>source_sheets (list):</strong>  All sheet objects in all workspaces</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError:</strong>  If the project index data passed in is None,\nraises and logs an error.</li>\n</ul>\n", "parameters": ["project_data_index", "source_sheets", "smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.get_data", "modulename": "uuid_module.get_data", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "uuid_module.get_data.refresh_source_sheets", "modulename": "uuid_module.get_data", "qualname": "refresh_source_sheets", "type": "function", "doc": "<p>Creates a dict of source sheets. If minutes is defined, only gathers\n   sheets modified since the minutes value. Otherwise pulls all sheets\n   from the workspaces.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>smartsheet_client (client):</strong>  Allows interaction with the Smartsheet API</li>\n<li><strong>sheet_ids (list):</strong>  The list of Smartsheet sheet IDs to parse</li>\n<li><strong>minutes (int, optional):</strong>  Number of minutes into the past that the API\nshould pull sheet and row data, if greater\nthan 0. Defaults to 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>source_sheets (list): The list of sheets, including row data for rows\n                        modified since the minutes value, if greater\n                        than 0</p>\n</blockquote>\n", "parameters": ["smartsheet_client", "sheet_ids", "minutes"], "funcdef": "def"}, {"fullname": "uuid_module.get_data.get_all_row_data", "modulename": "uuid_module.get_data", "qualname": "get_all_row_data", "type": "function", "doc": "<p>Parses through all source sheets and gets specific data from the\n   columns provided.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>source_sheets (list):</strong>  A list of Sheet objects to parse</li>\n<li><strong>columns (list):</strong>  A list of column names to extract data from.</li>\n<li><strong>minutes (int):</strong>  The number of minutes to look back when collecting\nrow data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict: Returns a dict of UUIDs and the row values\n  none: There is no row data in any source sheet.</p>\n</blockquote>\n", "parameters": ["source_sheets", "columns", "minutes"], "funcdef": "def"}, {"fullname": "uuid_module.get_data.get_blank_uuids", "modulename": "uuid_module.get_data", "qualname": "get_blank_uuids", "type": "function", "doc": "<p>For all rows that need a UUID generated, creates nested dicts with the\n   necessary data to generate the UUID.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>source_sheets (list):</strong>  A list of Sheet objects</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict: A nested set of dictionaries\n  none: There are no sheets to update.</p>\n</blockquote>\n", "parameters": ["source_sheets"], "funcdef": "def"}, {"fullname": "uuid_module.get_data.load_jira_index", "modulename": "uuid_module.get_data", "qualname": "load_jira_index", "type": "function", "doc": "<p>Create indexes on the Jira index rows. Pulls from the Smartsheet API\n   every time to get the most up-to-date version of the sheet data.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to query the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>sheet: A Smartsheet Sheet object that includes all data for the Jira\n         Index Sheet\n  dict: A dictionary containing mapped column IDs to column names\n  dict: A dictionary containing the Jira ticket as the key and the\n        row ID as the value.</p>\n</blockquote>\n", "parameters": ["smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.get_data.get_sub_indexes", "modulename": "uuid_module.get_data", "qualname": "get_sub_indexes", "type": "function", "doc": "<p>Read all rows from the full project data index. If the Jira\n   column exists in the dict values, create two sub-indexes.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>project_data (dict): The full set of UUIDs:</strong> Column data\npulled from the API.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict: jira_sub_index in the form of Jira Ticket: [UUID(s)] (list)\n  dict: project_sub_index in the form of UUID: Jira Ticket (str)</p>\n</blockquote>\n", "parameters": ["project_data"], "funcdef": "def"}, {"fullname": "uuid_module.get_data.get_all_sheet_ids", "modulename": "uuid_module.get_data", "qualname": "get_all_sheet_ids", "type": "function", "doc": "<p>Get all the sheet IDs from every sheet in every folder, subfolder and\n   workspace as defined in the workspace_id.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list: A list of all sheet IDs across every workspace</p>\n</blockquote>\n", "parameters": ["smartsheet_client", "minutes"], "funcdef": "def"}, {"fullname": "uuid_module.get_data.get_secret", "modulename": "uuid_module.get_data", "qualname": "get_secret", "type": "function", "doc": "<p>Gets the API token from AWS Secrets Manager.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>e:</strong>  DecryptionFailureException.</li>\n<li><strong>e:</strong>  InternalServiceErrorException</li>\n<li><strong>e:</strong>  InvalidParameterException</li>\n<li><strong>e:</strong>  InvalidRequestException</li>\n<li><strong>e:</strong>  ResourceNotFoundException</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str: The Smartsheet API key</p>\n</blockquote>\n", "parameters": ["secret_name"], "funcdef": "def"}, {"fullname": "uuid_module.get_data.get_secret_name", "modulename": "uuid_module.get_data", "qualname": "get_secret_name", "type": "function", "doc": "<p></p>\n", "parameters": ["env"], "funcdef": "def"}, {"fullname": "uuid_module.helper", "modulename": "uuid_module.helper", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "uuid_module.helper.get_cell_data", "modulename": "uuid_module.helper", "qualname": "get_cell_data", "type": "function", "doc": "<p>Gets the cell data from a row via column name</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>row (Row):</strong>  The row of data that contains the IDs</li>\n<li><strong>column_name (str):</strong>  The name of the referenced column</li>\n<li><strong>column_map (dict): The map of Column Name:</strong>  Column ID</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  Validates row is a Smartsheet Row object</li>\n<li><strong>TypeError:</strong>  Validates column_name is a string</li>\n<li><strong>TypeError:</strong>  Validates column_map is a dict</li>\n<li><strong>KeyError:</strong>  Raises KeyError if the column name isn't in the dictionary</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>cell (Cell): A Cell object or None if the column is not found in the\n               map.</p>\n</blockquote>\n", "parameters": ["row", "column_name", "column_map"], "funcdef": "def"}, {"fullname": "uuid_module.helper.get_column_map", "modulename": "uuid_module.helper", "qualname": "get_column_map", "type": "function", "doc": "<p>Creates a map of column names to column IDs</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>sheet (sheet):</strong>  The sheet containing column names and IDs</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  Validates sheet is a Smartsheet Sheet object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dict: A map of Column Name: Column ID</p>\n</blockquote>\n", "parameters": ["sheet"], "funcdef": "def"}, {"fullname": "uuid_module.helper.has_cell_link", "modulename": "uuid_module.helper", "qualname": "has_cell_link", "type": "function", "doc": "<p>Determine if an existing cell already has a cell link, which direction\n   and whether it needs to be repaired. Returning None currently disabled\n   because it caused the script to skip valid cells that should have been\n   linked.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>old_cell (Cell):</strong>  The Cell object to check.</li>\n<li><strong>direction (str):</strong>  Whether to check incoming or outgoing cell links.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  Validates old_cell is a Smartsheet cell object</li>\n<li><strong>TypeError:</strong>  Validates direction is a string</li>\n<li><strong>ValueError:</strong>  Validates direction is either 'In' or 'Out'</li>\n<li><strong>KeyError:</strong>  If the old_cell doesn't have the extended attributes for\ncell links raises as 'Unlinked'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str: \"Linked\" if status is \"OK\", \"Broken\" if staus is \"BROKEN\",\n       \"Unlinked\" if the cell doesn't have a cell link property. If the\n       cell link type is 'linksOutToCells', always return \"Linked\".</p>\n</blockquote>\n", "parameters": ["old_cell", "direction"], "funcdef": "def"}, {"fullname": "uuid_module.helper.get_cell_value", "modulename": "uuid_module.helper", "qualname": "get_cell_value", "type": "function", "doc": "<p>Get the value of the cell or return None</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>row (Row):</strong>  The row of data that contains the IDs</li>\n<li><strong>col_name (str):</strong>  The name of the referenced column</li>\n<li><strong>col_map (dict): The map of Column Name:</strong>  Column ID</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  Validates row is a Smartsheet Row object</li>\n<li><strong>TypeError:</strong>  Validates col_name is a string</li>\n<li><strong>TypeError:</strong>  Validates col_map is a dict</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str: The value of the cell.\n  none: If the cell doesn't exist or has a null value.</p>\n</blockquote>\n", "parameters": ["row", "col_name", "col_map"], "funcdef": "def"}, {"fullname": "uuid_module.helper.json_extract", "modulename": "uuid_module.helper", "qualname": "json_extract", "type": "function", "doc": "<p>Recursively fetch values from nested JSON.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>obj (json):</strong>  The JSON object to pars through</li>\n<li><strong>key (str):</strong>  The key to search for</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If the objects passed in aren't a dict or string,\nrespectively.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str: The value if a key matches inside the obj JSON</p>\n</blockquote>\n", "parameters": ["obj", "key"], "funcdef": "def"}, {"fullname": "uuid_module.helper.truncate", "modulename": "uuid_module.helper", "qualname": "truncate", "type": "function", "doc": "<p>Return a value truncated to a specific number of decimal places.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>number (int):</strong>  The number to truncate</li>\n<li><strong>decimals (int, optional):</strong>  The number of decimal places to truncate.\nDefaults to 0.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  Validates the number is actually a number.</li>\n<li><strong>ValueError:</strong>  Validates that the decimal is 0 or more.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int: The number, truncated to the number of decimal places.</p>\n</blockquote>\n", "parameters": ["number", "decimals"], "funcdef": "def"}, {"fullname": "uuid_module.helper.get_timestamp", "modulename": "uuid_module.helper", "qualname": "get_timestamp", "type": "function", "doc": "<p>Subtracts the number intput from the current time to generate a\n   timestamp N number of minutes ago.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>number (int):</strong>  Number of seconds</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  Validates number is an int</li>\n<li><strong>ValueError:</strong>  Ensures minutes is &gt; 0</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>string: an ISO8601 compliant timestamp</p>\n</blockquote>\n", "parameters": ["number"], "funcdef": "def"}, {"fullname": "uuid_module.helper.chunks", "modulename": "uuid_module.helper", "qualname": "chunks", "type": "function", "doc": "<p>Yield successive n-sized chunks from source.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>source (list):</strong>  The list of objects to chunk</li>\n<li><strong>n (int):</strong>  The number of items in the list to chunk together</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  Validates source is a list</li>\n<li><strong>TypeError:</strong>  Validates n is an int</li>\n<li><strong>ValueError:</strong>  Validates n must be non-zero</li>\n<li><strong>ValueError:</strong>  Validates n &gt; 0</li>\n<li><strong>ValueError:</strong>  Validates length of list is greater than n</li>\n</ul>\n\n<h6 id=\"yields\">Yields</h6>\n\n<blockquote>\n  <p>source (list): The sub-list of chunked items</p>\n</blockquote>\n", "parameters": ["source", "n"], "funcdef": "def"}, {"fullname": "uuid_module.push_jira", "modulename": "uuid_module.push_jira", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "uuid_module.variables", "modulename": "uuid_module.variables", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "uuid_module.variables.log_location", "modulename": "uuid_module.variables", "qualname": "log_location", "type": "variable", "doc": "<p>Location to save logs</p>\n"}, {"fullname": "uuid_module.variables.module_log_name", "modulename": "uuid_module.variables", "qualname": "module_log_name", "type": "variable", "doc": "<p>The main log written to disk</p>\n"}, {"fullname": "uuid_module.variables.workspace_id", "modulename": "uuid_module.variables", "qualname": "workspace_id", "type": "variable", "doc": "<p>List of workspace IDs. Workspace IDs are Type: int.</p>\n"}, {"fullname": "uuid_module.variables.jira_idx_sheet", "modulename": "uuid_module.variables", "qualname": "jira_idx_sheet", "type": "variable", "doc": "<p>Jira Index Sheet ID. Type: str</p>\n"}, {"fullname": "uuid_module.variables.dev_workspace_id", "modulename": "uuid_module.variables", "qualname": "dev_workspace_id", "type": "variable", "doc": "<p>Single Workspace ID for Integration Testing, so that tests can run without\naffecting active Prod data. Workspace Type: list, Workspace IDs Type: int</p>\n"}, {"fullname": "uuid_module.variables.dev_jira_idx_sheet", "modulename": "uuid_module.variables", "qualname": "dev_jira_idx_sheet", "type": "variable", "doc": "<p>Jira Index Sheet in Dev. Type: str</p>\n"}, {"fullname": "uuid_module.variables.uuid_col", "modulename": "uuid_module.variables", "qualname": "uuid_col", "type": "variable", "doc": "<p>UUID column name. Type: str</p>\n"}, {"fullname": "uuid_module.variables.task_col", "modulename": "uuid_module.variables", "qualname": "task_col", "type": "variable", "doc": "<p>Tasks column name. Type: str</p>\n"}, {"fullname": "uuid_module.variables.description_col", "modulename": "uuid_module.variables", "qualname": "description_col", "type": "variable", "doc": "<p>Description column name. Type: str</p>\n"}, {"fullname": "uuid_module.variables.status_col", "modulename": "uuid_module.variables", "qualname": "status_col", "type": "variable", "doc": "<p>Status column name. Type: str</p>\n"}, {"fullname": "uuid_module.variables.assignee_col", "modulename": "uuid_module.variables", "qualname": "assignee_col", "type": "variable", "doc": "<p>Assignee column name. Type: str</p>\n"}, {"fullname": "uuid_module.variables.jira_col", "modulename": "uuid_module.variables", "qualname": "jira_col", "type": "variable", "doc": "<p>Jira ticket column name. Type: str</p>\n"}, {"fullname": "uuid_module.variables.summary_col", "modulename": "uuid_module.variables", "qualname": "summary_col", "type": "variable", "doc": "<p>Summary column name. Type: str</p>\n"}, {"fullname": "uuid_module.variables.start_col", "modulename": "uuid_module.variables", "qualname": "start_col", "type": "variable", "doc": "<p>Start column name. Type: str</p>\n"}, {"fullname": "uuid_module.variables.finish_col", "modulename": "uuid_module.variables", "qualname": "finish_col", "type": "variable", "doc": "<p>Finish column name. Type: str</p>\n"}, {"fullname": "uuid_module.variables.duration_col", "modulename": "uuid_module.variables", "qualname": "duration_col", "type": "variable", "doc": "<p>Duration column name. Type: str</p>\n"}, {"fullname": "uuid_module.variables.predecessor_col", "modulename": "uuid_module.variables", "qualname": "predecessor_col", "type": "variable", "doc": "<p>Predecessors column name. Type: str</p>\n"}, {"fullname": "uuid_module.variables.index_columns", "modulename": "uuid_module.variables", "qualname": "index_columns", "type": "variable", "doc": "<p>List of all columns in the UUID Index Sheet. Type: list</p>\n"}, {"fullname": "uuid_module.variables.jira_index_columns", "modulename": "uuid_module.variables", "qualname": "jira_index_columns", "type": "variable", "doc": "<p>List of all columns in the Jira Index Sheet. Type: list</p>\n"}, {"fullname": "uuid_module.variables.sheet_columns", "modulename": "uuid_module.variables", "qualname": "sheet_columns", "type": "variable", "doc": "<p>List of columns found in Project or Program sheets. Type: list</p>\n"}, {"fullname": "uuid_module.variables.sync_columns", "modulename": "uuid_module.variables", "qualname": "sync_columns", "type": "variable", "doc": "<p>List of columns to use during Cell link syncs. Type: list</p>\n"}, {"fullname": "uuid_module.variables.minutes", "modulename": "uuid_module.variables", "qualname": "minutes", "type": "variable", "doc": "<p>The maximum number of minutes into the past the get_timestamp function\nshould look before filtering out results. Type: int</p>\n"}, {"fullname": "uuid_module.write_data", "modulename": "uuid_module.write_data", "qualname": "", "type": "module", "doc": "<p></p>\n"}, {"fullname": "uuid_module.write_data.write_uuids", "modulename": "uuid_module.write_data", "qualname": "write_uuids", "type": "function", "doc": "<p>Writes UUIDs back to a collection of Smartsheets</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>sheets_to_update (dict):</strong>  The sheets that need a UUID written</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int: The number of sheets that were updated.</p>\n</blockquote>\n", "parameters": ["sheets_to_update", "smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.write_data.write_jira_index_cell_links", "modulename": "uuid_module.write_data", "qualname": "write_jira_index_cell_links", "type": "function", "doc": "<p>For each sheet in the destination sheet index, parse through the rows,\n   determine if cells need to be linked, create cell links and then write\n   the rows back to the sheet.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>project_sub_index (dict):</strong>  The list of projects that have a\nUUID:Jira Ticket map.</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: True if any links were written, False if no data was\n        written back to any sheet.</p>\n</blockquote>\n", "parameters": ["project_sub_index", "smartsheet_client"], "funcdef": "def"}, {"fullname": "uuid_module.write_data.check_uuid", "modulename": "uuid_module.write_data", "qualname": "check_uuid", "type": "function", "doc": "<p>Function to check the UUIDs in the Jira Index.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>uuid_value (list):</strong>  The list of UUIDs to look for</li>\n<li><strong>jira_value (str):</strong>  Used in logging to associate UUID(s) with a Jira\nticket</li>\n<li><strong>uuid_list (list):</strong>  UIDs to check in to see if there's a match</li>\n<li><strong>jira_data_values (list):</strong>  UUIDs associated with a Jira ticket\nfrom the Jira Index</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: False if there is no UUID list or if the UUID is found\n        in the UUID list.\n  list: uuid_list if the UUID is not found in the uuid_list after\n        appending the new UUID, or jira_data_values if the UUID\n        value is None\n  none: If the 'if' checks fail.</p>\n</blockquote>\n", "parameters": ["uuid_value", "jira_value", "uuid_list", "jira_data_values"], "funcdef": "def"}, {"fullname": "uuid_module.write_data.write_predecessor_dates", "modulename": "uuid_module.write_data", "qualname": "write_predecessor_dates", "type": "function", "doc": "<p>Ensure predecessor start dates are updated across all linked sheets,\n   but only if the new start date is != the existing start date.</p>\n\n<h6 id=\"args\">Args</h6>\n\n<ul>\n<li><strong>src_data (dict):</strong>  Row data from the write_uuid_cell_links.</li>\n<li><strong>project_data_index (dict):</strong>  The dict of UUIDs and row data pulled\nfrom every project sheet.</li>\n<li><strong>smartsheet_client (Object):</strong>  The Smartsheet client to interact\nwith the API</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: True if the Start Date in the earliest predecessor was\n        written back via API. False if the Start Date was not\n        written due to failure.</p>\n</blockquote>\n", "parameters": ["src_data", "project_data_index", "smartsheet_client"], "funcdef": "def"}]